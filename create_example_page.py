import os
import json
from pyairctrl.base_client import AirClientBase


def test_data():
    global heading
    global content
    heading = "*This file was auto-generated by create_example_page.py, do not edit this file manually*\n\n# Heading\n"
    content = ""
    dir_path = os.path.dirname(os.path.realpath(__file__))
    with open(os.path.join(dir_path, "testing/data.json"), "r") as json_file:
        with open(
            os.path.join(dir_path, "{}.md".format("Examples")), mode="w"
        ) as md_file:
            data = json.load(json_file)
            for client_type in data:
                create_header(client_type)
                create_data(data[client_type], client_type)
                heading += "\n\n"
                content += "---\n\n"

            md_file.write(heading)
            md_file.write(content)


def create_header(client_type):
    global heading
    global content
    content += '# <a name="{client_type}"></a>{client_type}\n'.format(
        client_type=client_type
    )
    heading += "## [{client_type}](#{client_type})\n".format(client_type=client_type)


def create_data(client_data, client_type):
    for single_set in client_data:
        create_single_set(
            client_data[single_set],
            "{client_type}-{key}".format(client_type=client_type, key=single_set),
        )


def create_single_set(single_set, name):
    global heading
    global content
    content += (
        '## <a name="{name}"></a> {callLocation}: {info} (Device: {device})\n'.format(
            name=name,
            callLocation=single_set["callLocation"],
            info=single_set["info"],
            device=single_set["device"],
        )
    )
    heading += "### [{callLocation}: {info} (Device: {device})](#{name})\n".format(
        name=name,
        callLocation=single_set["callLocation"],
        info=single_set["info"],
        device=single_set["device"],
    )
    content += "Execution:\n"
    for execute in single_set["execute"]:
        content += "- {}\n".format(execute)

    content += "\nOutput:\n\n"
    content += "```\n"

    if "output" in single_set:
        data = single_set["output"]
        hasOutput = True
    else:
        data = single_set["input"]
        hasOutput = False

    try:
        data = json.loads(data)
        isJson = True
    except ValueError:
        isJson = False

    if not hasOutput and isJson:
        data = AirClientBase._dump_keys(data, None)

    if isJson:
        data = json.dumps(data, indent=4)

    content += "{}\n".format(data)
    content += "```\n"


if __name__ == "__main__":
    test_data()
